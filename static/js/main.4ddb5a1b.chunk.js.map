{"version":3,"sources":["Form.js","LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["Form","getFormInfo","event","setState","userChoice","target","value","state","action","onChange","this","name","id","onClick","e","props","handleChange","type","Component","LandingPage","onClickLandingPage","description","console","log","className","scaleOne","0","1","2","3","4","5","6","7","8","9","scaleTwo","scaleThree","scaleThunder","App","getWeather","loading","url","citySelect","axios","method","params","reqUrl","then","result","weatherData","data","consolidated_weather","Tone","stop","windSpeed","wind_speed","weatherStatis","weather_state_abbr","windDirection","wind_direction","visibility","humidity","metropolis","preventDefault","repeat","time","index","windD","numString","Math","round","toString","newArray","map","newNumber","arrayOne","note","length","synth","triggerAttackRelease","scheduleRepeat","startTone","reverbTime","melody","volume","reverb","phaser","connect","toMaster","bpm","start","stopTone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uVA2CmBA,E,kDAvCf,aAAc,IAAD,8BACT,gBAMJC,YAAc,SAACC,GAEX,EAAKC,SAAS,CACVC,WAAWF,EAAMG,OAAOC,SAR5B,EAAKC,MAAQ,CACTH,WAAY,IAHP,E,qDAeJ,IAAD,OACJ,OACI,6BACI,0BAAMI,OAAO,IACT,4BAAQC,SAAUC,KAAKT,YAAaK,MAAOI,KAAKH,MAAMH,WAAYO,KAAK,YAAYC,GAAG,aAElF,4BAAQN,MAAM,IAAd,iBACA,4BAAQA,MAAM,QAAd,WACA,4BAAQA,MAAM,UAAd,YACA,4BAAQA,MAAM,WAAd,cACA,4BAAQA,MAAM,WAAd,eACA,4BAAQA,MAAM,YAAd,SACA,4BAAQA,MAAM,WAAd,eAGJ,4BAAQO,QAAS,SAACC,GAAD,OAAO,EAAKC,MAAMC,aAAaF,EAAG,EAAKP,MAAMH,aAAaa,KAAK,UAAhF,gB,GA/BDC,aC+BJC,E,kDA9BX,aAAc,IAAD,8BACT,gBAMJC,mBAAqB,WACjB,EAAKjB,SAAS,CACVkB,aAAa,IAEjBC,QAAQC,IAAI,WACZD,QAAQC,IAAI,EAAKhB,MAAMc,cAVvB,EAAKd,MAAQ,CACTc,aAAY,GAHP,E,qDAeT,OACI,6BACKX,KAAKH,MAAMc,YACJ,yBAAKG,UAAU,gBACX,2CACA,uPACA,4BAAQX,QAASH,KAAKU,oBAAtB,UAEJ,yBAAKI,UAAU,sB,GAxBbN,aCKpBO,EAAW,CACfC,EAAG,KACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MACHC,EAAG,MACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KAICC,EAAW,CACfV,EAAG,KACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KAICE,EAAa,CACjBX,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MACHC,EAAG,MACHC,EAAG,KACHC,EAAG,KAICG,EAAe,CACnBZ,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MACHC,EAAG,MACHC,EAAG,KACHC,EAAG,KACHC,EAAG,IACHC,EAAG,KA0MUI,E,kDAtMb,aAAe,IAAD,8BACZ,gBAoCFC,WAAa,WACX,EAAKrC,SAAS,CACZsC,SAAQ,IACR,WACA,IAAMC,EAAG,mDAA+C,EAAKnC,MAAMoC,YACnEC,IAAM,CACJC,OAAQ,MACRH,IAAK,8BACLI,OAAQ,CACNC,OAAQL,KAETM,MAAK,SAACC,GAEP,IAAMC,EAAcD,EAAOE,KAAKC,qBAAqB,GACrDC,YAAeC,OACf,EAAKnD,SAAS,CACZoD,UAAWL,EAAYM,WACvBC,cAAeP,EAAYQ,mBAC3BC,cAAeT,EAAYU,eAC3BC,WAAYX,EAAYW,WACxBC,SAAUZ,EAAYY,SACtBrB,SAAQ,WA1DF,EAiEdzB,aAAe,SAACd,EAAO6D,GACrB7D,EAAM8D,iBACN1C,QAAQC,IAAI,UAGZ,EAAKpB,SAAS,CACZwC,WAAYoB,IACX,kBAAM,EAAKvB,iBAxEF,EA6EdyB,OAAS,SAACC,EAAMC,GAEd7C,QAAQC,IAAI,UAAW4C,GAIvB,IAAMC,EAA6D,MAApD,EAAK7D,MAAMoD,cAAgB,EAAKpD,MAAMsD,YAG/CQ,EADSC,KAAKC,MAAMH,GACDI,WAEnBC,EADQ,YAAOJ,GACKK,KAAI,SAACC,GAE7B,MAAiC,OAA7B,EAAKpE,MAAMkD,cACNpB,EAAWsC,GACe,OAA7B,EAAKpE,MAAMkD,cACRrB,EAASuC,GACiB,MAA7B,EAAKpE,MAAMkD,cACRhC,EAASkD,GACiB,MAA7B,EAAKpE,MAAMkD,cACRnB,EAAaqC,QAEtBrD,QAAQC,IAAIoD,MAIRC,EAAWH,EACjBnD,QAAQC,IAAIqD,GACZ,IAAIC,EAAOJ,EAASN,EAAQM,EAASK,QACrC,EAAKC,MAAMC,qBAAqBH,EAAM,KAAMX,IA1GhC,EA+Gde,eAAiB,WACf,IAAId,EAAQ,EACZ7C,QAAQC,IAAI4C,EAAO,UACnBd,YAAe4B,gBAAe,SAAAf,GAE5B,EAAKD,OAAOC,EAAMC,GAClBA,MACC,OAtHS,EA0Hde,UAAY,WAEV,IAAMC,EAAc,EAAK5E,MAAMuD,SAAW,IAAO,IACjDxC,QAAQC,IAAI4D,GAGZ,EAAKhF,SAAS,CACZiF,QAAO,IAGT,EAAKL,MAAMM,OAAO/E,OAAS,GAE3B,IAAMgF,EAAS,IAAIjC,WAAe8B,GAClC7D,QAAQC,IAAI8B,WAAc/C,OAC1B,IAAMiF,EAAS,IAAIlC,SAAY,CAC7B,UAAa,EACb,QAAW,EACX,cAAiB,IAEnB,EAAK0B,MAAMS,QAAQD,GACnBA,EAAOC,QAAQF,GACfA,EAAOG,WAGPpC,YAAeqC,IAAIpF,MAAiC,EAAxB,EAAKC,MAAMgD,UAEvCF,YAAesC,QAEf,EAAKZ,MAAMC,uBACX,EAAKC,kBAvJO,EA0JdW,SAAW,WACTvC,YAAeC,OACf,EAAKnD,SAAS,CACZiF,QAAO,KA3JT,EAAKL,MACL,IAAI1B,QAAW,CACb,WAAc,CACZ,KAAQ,QAEV,SAAY,CACV,OAAU,KACV,MAAS,GACT,QAAW,GACX,QAAW,MAKf,EAAK9C,MAAQ,CACXoC,WAAY,GACZc,cAAc,GACdF,UAAW,EACXI,cAAc,EACdE,WAAW,EACXC,SAAS,EACTrB,SAAQ,EACR2C,QAAQ,EACR/D,aAAa,GAzBH,E,gEAiCZX,KAAK8B,e,+BA2IL,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,4BAAI,0BAAMA,UAAU,iBAAhB,WAAJ,IAAmD,0BAAMA,UAAU,iBAAhB,UAEnD,kBAAC,EAAD,CAAMR,aAAcN,KAAKM,eAEzB,iCAEGN,KAAKH,MAAMkC,QACR,uBAAGjB,UAAU,4BACb,yBAAKA,UAAU,aACf,4BAAQX,QAASH,KAAKH,MAAM6E,OAAS,KAAO1E,KAAKwE,UAAWtE,GAAG,aAA/D,SACA,4BAAQC,QAASH,KAAKkF,SAAUhF,GAAG,YAAnC,UAIN,gCACE,uDACA,gDAAqB,wD,GAhMbM,aCnDE2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvF,QAAQuF,MAAMA,EAAMC,c","file":"static/js/main.4ddb5a1b.chunk.js","sourcesContent":["import React, { Component } from 'react'\n// import { render } from '@testing-library/react';\n\nclass Form extends Component{\n    constructor(){\n        super();\n        this.state = {\n            userChoice: ''\n        }\n    }\n//Saving value from users choice of city and setting the state\n    getFormInfo = (event) => {\n        // console.log(event.target.value);\n        this.setState({\n            userChoice:event.target.value\n        })\n    }\n\n\n    render(){\n        return(\n            <nav>\n                <form action=''>\n                    <select onChange={this.getFormInfo} value={this.state.userChoice} name='whichCity' id='whichCity'>\n                        {/* <option value=''>Choose A City</option> */}\n                        <option value=''>Choose A City</option>\n                        <option value='4118' >Toronto</option>\n                        <option value='565346' >Helsinki</option>\n                        <option value='1532755'>Casablanca</option>\n                        <option value='2458833'>New Orleans</option>\n                        <option value='15015372'>Kyoto</option>\n                        <option value='2351310'>Wellington</option>\n                    </select>\n\n                    <button onClick={(e) => this.props.handleChange(e, this.state.userChoice)} type=\"submit\">Launch</button>\n                </form>\n            </nav>\n        )\n    }\n}\n\n\n\n    export default Form;","import React, { Component } from 'react'\n\n\nclass LandingPage extends Component{\n    constructor(){\n        super();\n        this.state = {\n            description:true\n        }\n    }\n\n    onClickLandingPage = () => {\n        this.setState({\n            description: false\n        })\n        console.log('clicked');\n        console.log(this.state.description);\n    }\n    render(){\n        return(\n            <div>\n                {this.state.description\n                    ?   <div className=\"landingPage1\">\n                            <h2>DESCRIPTION</h2>\n                            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit Corrupti aperiam quasi ipsa dolore quis sint quam doloribus fugit labore iure quos maiores sit temporibus laudantium doloremque debitis molestiae commodi error.</p>\n                            <button onClick={this.onClickLandingPage}>Enter</button>\n                        </div>\n                    :   <div className=\"landingPage2\"></div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport * as Tone from \"tone\";\nimport Form from './Form'\nimport LandingPage from './LandingPage'\n\n// C Minor\nconst scaleOne = {\n  0: 'C3',\n  1: 'D3',\n  2: 'Eb3',\n  3: 'F3',\n  4: 'G3',\n  5: 'Ab3',\n  6: 'Bb3',\n  7: 'G2',\n  8: 'Bb2',\n  9: '0'\n}\n\n//C Dorian \nconst scaleTwo = {\n  0: 'C3',\n  1: 'D3',\n  2: 'Eb3',\n  3: 'F3',\n  4: 'G3',\n  5: 'A3',\n  6: 'Bb3',\n  7: 'G2',\n  8: 'Bb2',\n  9: '0'\n}\n\n// Custom\nconst scaleThree = {\n  0: 'F3',\n  1: 'Eb3',\n  2: 'C3',\n  3: 'Gb2',\n  4: 'D3',\n  5: 'A3',\n  6: 'Bb2',\n  7: 'Gb2',\n  8: 'F1',\n  9: '0'\n}\n\n//Thunderstorm\nconst scaleThunder = {\n  0: 'C3',\n  1: 'Db3',\n  2: 'E3',\n  3: 'F2',\n  4: 'Gb3',\n  5: 'Ab1',\n  6: 'B2',\n  7: 'C2',\n  8: '0',\n  9: '0'\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.synth =\n    new Tone.Synth({\n      \"oscillator\": {\n        \"type\": \"sine\"\n      },\n      \"envelope\": {\n        \"attack\": 0.005,\n        \"decay\": 0.1,\n        \"sustain\": 0.3,\n        \"release\": 0.5\n      }\n    })\n    \n    // citySelect a default value (Toronto)\n    this.state = {\n      citySelect: '',\n      weatherStatis:'',\n      windSpeed: 0,\n      windDirection:0,\n      visibility:0,\n      humidity:0,\n      loading:false,\n      melody: false,\n      description: true\n      //ANY OTHER WEATHER PARAMETERS AND CHANGE WITH this.setState\n    }\n    // console.log(this.state.citySelect);\n  }\n  componentDidMount() {\n    //call this.getWeather once the component is rendered\n    //Maybe put synth on this too\n    this.getWeather()\n    // console.log(this.getWeather);\n  }\n\n  getWeather = () => {\n    this.setState({\n      loading:true\n    },() => {\n      const url = `https://www.metaweather.com/api/location/${this.state.citySelect}`;\n      axios({\n        method: 'GET',\n        url: 'https://proxy.hackeryou.com',\n        params: {\n          reqUrl: url\n        }\n      }).then((result) => {\n        // get result from Axios call, navigate to the weather for the current day\n        const weatherData = result.data.consolidated_weather[0]\n        Tone.Transport.stop();\n        this.setState({\n          windSpeed: weatherData.wind_speed,\n          weatherStatis: weatherData.weather_state_abbr,\n          windDirection: weatherData.wind_direction,\n          visibility: weatherData.visibility,\n          humidity: weatherData.humidity,\n          loading:false\n        });\n      })\n    })\n    //last digits (4118) will need to be stored in a variable to select different cities\n  }\n\n  handleChange = (event, metropolis) => {\n    event.preventDefault();\n    console.log('hello?');\n    // console.log(metropolis);\n    //update the citySelect in state and make new axios call\n    this.setState({\n      citySelect: metropolis\n    }, () => this.getWeather())\n    // console.log(this.state.citySelect);\n  }\n\n\n  repeat = (time, index) => {\n    // --------------------------------------------------------------------------------------------- L O G I C -----------------------\n    console.log('index #', index);\n    // let note = notes[index % notes.length];\n    // Notes playing equation\n    // I've taken wind direction and added visibility to diversify the note array, then times it to move the decimal\n    const windD = (this.state.windDirection + this.state.visibility) * 100000000000\n    // console.log(windD);\n    const newVis = Math.round(windD)\n    const numString = newVis.toString();\n    const numNotes = [...numString]\n    const newArray = numNotes.map((newNumber) => {\n      //THIS LOGIC MIGHT NEED SOME WORK...MAYBE AN ARRAY FOR EACH WEATHERSTATIS?\n      if (this.state.weatherStatis === 'hr'){\n        return scaleThree[newNumber]\n      } if (this.state.weatherStatis === 'lc') {\n        return scaleTwo[newNumber]\n      } if (this.state.weatherStatis === 's'){\n        return scaleOne[newNumber]\n      } if (this.state.weatherStatis === 't'){\n        return scaleThunder[newNumber]\n      }\n      console.log(newNumber);\n    });\n    // console.log(newArray);\n\n    const arrayOne = newArray\n    console.log(arrayOne);\n    let note = newArray[index % newArray.length];\n    this.synth.triggerAttackRelease(note, '8n', time)\n    // console.log(this.state.weatherStatis);\n  }\n\n\n  scheduleRepeat = () => {\n    let index = 0;\n    console.log(index, 'index?');\n    Tone.Transport.scheduleRepeat(time => {\n      //do something with the time\n      this.repeat(time, index);\n      index++;\n    }, '8n');\n  }\n\n\n  startTone = () => {\n    // Reverb equation\n    const reverbTime = (this.state.humidity / 100) - 0.15\n    console.log(reverbTime);\n\n\n    this.setState({\n      melody:true\n    })\n    //All Synth add ons and FXs, then route to master output ---------------------------------------- F X ----------------------------\n    this.synth.volume.value = -20;\n    // this.synth.portamento = '0.05';\n    const reverb = new Tone.JCReverb (reverbTime);\n    console.log(Tone.JCReverb.value);\n    const phaser = new Tone.Phaser({\n      \"frequency\": 0,\n      \"octaves\": 2,\n      \"baseFrequency\": 0\n    })\n    this.synth.connect(phaser)\n    phaser.connect(reverb)\n    reverb.toMaster();\n\n    //wind speed is setting the BPM (*8 to make sure its not too slow)\n    Tone.Transport.bpm.value = (this.state.windSpeed) * 8\n    // console.log(Tone.Transport.bpm.value);\n    Tone.Transport.start(); \n    //Not sure why this.synth.triggerAttackRelease() is called a second time?\n    this.synth.triggerAttackRelease();\n    this.scheduleRepeat();\n  }\n\n  stopTone = () => {\n    Tone.Transport.stop();\n    this.setState({\n      melody:false\n    })\n  }\n\n  // onClickLandingPage = () => {\n  //   this.setState({\n  //     description:false\n  //   })\n  //   console.log('clicked');\n  //   console.log(this.state.description);\n  // }\n  \n\n  render() {\n    // console.log(this.state.windDirection);\n    return (\n      <div className=\"App\">\n        <LandingPage />\n        <h1><span className=\"headerWordOne\">Weather</span> <span className=\"headerWordTwo\">Synth</span></h1>\n\n        <Form handleChange={this.handleChange} />\n\n        <section>\n          {/* Checking it loading is T/F to display loading on axios call */}\n          {this.state.loading\n            ? <i className=\"fas fa-spinner fa-pulse\"></i>\n            : <div className=\"startStop\">\n              <button onClick={this.state.melody ? null : this.startTone} id=\"startSong\">Start</button>\n              <button onClick={this.stopTone} id=\"stopSong\">Stop</button>\n            </div>\n          }\n        </section>\n        <footer>\n          <p>Build by Patrick Sherard</p>\n          <p>Made with Tone.js <span>and MetaWeather</span></p>\n        </footer>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}