{"version":3,"sources":["Form.js","LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["Form","getFormInfo","event","setState","userChoice","target","value","nullButton","preventDefault","state","console","log","this","props","melodyChange","className","action","onChange","name","id","disabled","selected","onClick","e","handleChange","type","Component","LandingPage","onClickLandingPage","description","scaleOne","0","1","2","3","4","5","6","7","8","9","scaleTwo","App","getWeather","loading","url","citySelect","axios","method","params","reqUrl","then","result","weatherData","data","consolidated_weather","Tone","stop","windSpeed","wind_speed","weatherStatis","weather_state_abbr","windDirection","wind_direction","visibility","humidity","metropolis","repeat","time","index","windD","numString","Math","round","toString","newArray","map","newNumber","arrayOne","note","length","synth","triggerAttackRelease","scheduleRepeat","startTone","reverbTime","melody","volume","reverb","phaser","connect","toMaster","bpm","start","stopTone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.adba2a69.chunk.js","sourcesContent":["import React, { Component } from 'react'\n// import { render } from '@testing-library/react';\n\nclass Form extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userChoice: ''\n        }\n    }\n    //Saving value from users choice of city and setting the state\n    getFormInfo = (event) => {\n        // console.log(event.target.value);\n        this.setState({\n            userChoice: event.target.value\n        })\n    }\n\n    nullButton = (event) => {\n        event.preventDefault()\n    }\n\n\n    render() {\n        console.log(this.props.melodyChange);\n        return (\n            <nav>\n                <form className=\"formMenu\" action=''>\n                    <select onChange={this.getFormInfo} value={this.state.userChoice} name='whichCity' id='whichCity'>\n                        {/* <option value=''>Choose A City</option> */}\n                        <option value='' disabled selected>Choose A City</option>\n                        <option value='4118' >Toronto</option>\n                        <option value='565346' >Helsinki</option>\n                        <option value='1532755'>Casablanca</option>\n                        <option value='2458833'>New Orleans</option>\n                        <option value='15015372'>Kyoto</option>\n                        <option value='2351310'>Wellington</option>\n                    </select>\n\n                    <button className=\"btnLaunch btnGlobal\" onClick={this.props.melodyChange ? this.nullButton : (e) => this.props.handleChange(e, this.state.userChoice)} type=\"submit\">Launch</button>\n                </form>\n            </nav>\n        )\n    }\n}\n\n\n\nexport default Form;","import React, { Component } from 'react'\n\n\nclass LandingPage extends Component{\n    constructor(){\n        super();\n        this.state = {\n            description:true\n        }\n    }\n\n    onClickLandingPage = () => {\n        this.setState({\n            description: false\n        })\n        console.log('clicked');\n        console.log(this.state.description);\n    }\n    render(){\n        return(\n            <div>\n                {this.state.description\n                    ?   <div className=\"landingPage\">\n                            <h2>DESCRIPTION</h2>\n                            <p>Welcome to Weather Synth. This app use’s real time weather data from different cities across the world to shape sound. As the user, you get to choose what city you want to listen to. What you’re listening to is varius weather parameters affecting the synth by picking which notes are played and in what scale. As well as the amount of reverb, chorus, phaser and delay. The speed of the song is determined by the wind speed and the oscillator by the weather condition. Press start to hear the end result. </p>\n                            <button className=\"btnGlobal btnLandingPage\" onClick={this.onClickLandingPage}>Enter</button>\n                        </div>\n                    :   ''\n                }\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport * as Tone from \"tone\";\nimport Form from './Form'\nimport LandingPage from './LandingPage';\n\n// C Major\nconst scaleOne = {\n  0: 'C3',\n  1: 'D3',\n  2: 'E3',\n  3: 'F3',\n  4: 'G3',\n  5: 'A3',\n  6: 'B3',\n  7: 'G2',\n  8: 'B2',\n  9: '0'\n}\n\n//C Dorian \nconst scaleTwo = {\n  0: 'C3',\n  1: 'D3',\n  2: 'Eb3',\n  3: 'F3',\n  4: 'G3',\n  5: 'A3',\n  6: 'Bb3',\n  7: 'G2',\n  8: 'Bb2',\n  9: '0'\n}\n\n//Custom\nconst scaleThree = {\n  0: 'F3',\n  1: 'Eb3',\n  2: 'C3',\n  3: 'Gb2',\n  4: 'D3',\n  5: 'A3',\n  6: 'Bb2',\n  7: 'Gb2',\n  8: 'F1',\n  9: '0'\n}\n\n//Lydian\nconst scaleFour = {\n  0: 'C3',\n  1: 'D3',\n  2: 'E3',\n  3: 'F#3',\n  4: 'G3',\n  5: 'A3',\n  6: 'B3',\n  7: 'C2',\n  8: 'F#2',\n  9: '0'\n}\n\n// Hirajōshi\nconst scaleFive = {\n  0: 'C3',\n  1: 'Db3',\n  2: 'F3',\n  3: 'Gb3',\n  4: 'Bb3',\n  5: 'C4',\n  6: 'Bb2',\n  7: 'Gb2',\n  8: 'Db4',\n  9: '0'\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.synth =\n      new Tone.Synth({\n        \"oscillator\": {\n          \"type\": \"square\"\n        },\n        \"envelope\": {\n          \"attack\": 0.005,\n          \"decay\": 0.1,\n          \"sustain\": 0.3,\n          \"release\": 0.5\n        }\n      })\n\n    // citySelect a default value (Toronto)\n    this.state = {\n      citySelect: '',\n      weatherStatis: '',\n      windSpeed: 0,\n      windDirection: 0,\n      visibility: 0,\n      humidity: 0,\n      loading: false,\n      melody: false,\n      description: true\n      //ANY OTHER WEATHER PARAMETERS AND CHANGE WITH this.setState\n    }\n    // console.log(this.state.citySelect);\n  }\n  componentDidMount() {\n    //call this.getWeather once the component is rendered\n    //Maybe put synth on this too\n    this.getWeather()\n    // console.log(this.getWeather);\n  }\n\n  getWeather = () => {\n    this.setState({\n      loading: true\n    }, () => {\n      const url = `https://www.metaweather.com/api/location/${this.state.citySelect}`;\n      axios({\n        method: 'GET',\n        url: 'https://proxy.hackeryou.com',\n        params: {\n          reqUrl: url\n        }\n      }).then((result) => {\n        // get result from Axios call, navigate to the weather for the current day\n        const weatherData = result.data.consolidated_weather[0]\n        Tone.Transport.stop();\n        this.setState({\n          windSpeed: weatherData.wind_speed,\n          weatherStatis: weatherData.weather_state_abbr,\n          windDirection: weatherData.wind_direction,\n          visibility: weatherData.visibility,\n          humidity: weatherData.humidity,\n          loading: false\n        });\n      })\n    })\n    //last digits (4118) will need to be stored in a variable to select different cities\n  }\n\n  handleChange = (event, metropolis) => {\n    event.preventDefault();\n    console.log('hello?');\n    // console.log(metropolis);\n    //update the citySelect in state and make new axios call\n    this.setState({\n      citySelect: metropolis\n    }, () => this.getWeather())\n    // console.log(this.state.citySelect);\n  }\n\n\n  repeat = (time, index) => {\n    // --------------------------------------------------------------------------------------------- L O G I C -----------------------\n    console.log('index #', index);\n    // let note = notes[index % notes.length];\n    // Notes playing equation\n    // I've taken wind direction and added visibility to diversify the note array, then times it to move the decimal\n    const windD = (this.state.windDirection + this.state.visibility) * 100000000000\n    // console.log(windD);\n    const newVis = Math.round(windD)\n    const numString = newVis.toString();\n    const numNotes = [...numString]\n    const newArray = numNotes.map((newNumber) => {\n        if (this.state.weatherStatis === 'lc') {\n        return scaleOne[newNumber]\n      } if (this.state.weatherStatis === 'lr' || 'c') {\n        return scaleTwo[newNumber]\n      } if (this.state.weatherStatis === 's') {\n        return scaleThree[newNumber]\n      } if (this.state.weatherStatis === 'hc' || 't') {\n        return scaleFour[newNumber]\n      } if (this.state.weatherStatis === 'hr') {\n        return scaleFive[newNumber]\n      }\n    });\n    // console.log(newArray);\n\n    const arrayOne = newArray\n    console.log(arrayOne);\n    let note = newArray[index % newArray.length];\n    this.synth.triggerAttackRelease(note, '8n', time)\n    // console.log(this.state.weatherStatis);\n  }\n\n\n  scheduleRepeat = () => {\n    let index = 0;\n    console.log(index, 'index?');\n    Tone.Transport.scheduleRepeat(time => {\n      //do something with the time\n      this.repeat(time, index);\n      index++;\n    }, '8n');\n  }\n\n\n  startTone = () => {\n    // Reverb equation\n    const reverbTime = (this.state.humidity / 100) - 0.08\n    console.log(reverbTime);\n\n\n    this.setState({\n      melody: true\n    })\n    //All Synth add ons and FXs, then route to master output ---------------------------------------- F X ----------------------------\n    this.synth.volume.value = -20;\n    // this.synth.portamento = '0.05';\n    const reverb = new Tone.JCReverb(reverbTime);\n    console.log(Tone.JCReverb.value);\n    const phaser = new Tone.Phaser({\n      \"frequency\": 0,\n      \"octaves\": 2,\n      \"baseFrequency\": 0\n    })\n    this.synth.connect(phaser)\n    phaser.connect(reverb)\n    reverb.toMaster();\n\n    //wind speed is setting the BPM (*8 to make sure its not too slow)\n    Tone.Transport.bpm.value = (this.state.windSpeed) * 8\n    // console.log(Tone.Transport.bpm.value);\n    Tone.Transport.start();\n    //Not sure why this.synth.triggerAttackRelease() is called a second time?\n    this.synth.triggerAttackRelease();\n    this.scheduleRepeat();\n  }\n\n  stopTone = () => {\n    Tone.Transport.stop();\n    this.setState({\n      melody: false\n    })\n  }\n\n  onClickLandingPage = () => {\n    this.setState({\n      description: false\n    })\n    console.log('clicked');\n    console.log(this.state.description);\n\n  }\n\n\n  render() {\n    // console.log(this.state.windDirection);\n    return (\n      <div>\n \n        <LandingPage />\n\n{/* I know that two h1's arent best practise, but it was the best way to achieve the effect and keep them center */}\n        <header>\n          <div className=\"headerTitle\">\n            <h1>WEATHER</h1>\n            <h1>SYNTH</h1>\n          </div>\n          <Form handleChange={this.handleChange} melodyChange={this.state.melody} />\n        </header>\n\n        <section>\n          {/* Checking it loading is T/F to display loading on axios call */}\n          {this.state.loading\n            ? <i className=\"fas fa-spinner fa-pulse\"></i>\n            : <div className=\"startStop\">\n                <button className=\"btnGlobal btnStart\" onClick={this.state.melody ? null : this.startTone} id=\"startSong\">Start</button>\n                <button className=\"btnGlobal btnStop\" onClick={this.stopTone} id=\"stopSong\">Stop</button>\n              </div>\n          }\n        </section>\n        <footer>\n          <p><span>Built by Patr</span>ick Sherrard</p>\n          <p><span>Made with Tone.js</span> and MetaWeather</p>\n        </footer>\n\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}