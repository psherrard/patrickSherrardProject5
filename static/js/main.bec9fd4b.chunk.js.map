{"version":3,"sources":["assets/skyline.png","Form.js","LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","getFormInfo","event","setState","userChoice","target","value","nullButton","preventDefault","state","className","action","onChange","this","onClick","props","melodyChange","e","handleChange","name","id","disabled","selected","Component","LandingPage","onClickLandingPage","description","scaleOne","0","1","2","3","4","5","6","7","8","9","scaleTwo","scaleThree","scaleFour","scaleFive","App","getWeather","loading","url","citySelect","console","log","axios","method","params","reqUrl","then","result","weatherData","data","consolidated_weather","Tone","stop","wind_direction","cityName","title","windSpeed","wind_speed","weatherStatis","weather_state_abbr","weatherName","weather_state_name","windDirection","visibility","humidity","metropolis","repeat","time","index","windD","numString","Math","round","toString","newArray","map","newNumber","note","length","synth","triggerAttackRelease","scheduleRepeat","startTone","melody","toMaster","bpm","start","stopTone","src","require","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bec9fd4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/skyline.8159706a.png\";","import React, { Component } from 'react';\nclass Form extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userChoice: ''\n        }\n    }\n    //Saving value from users choice of city and setting the state\n    getFormInfo = (event) => {\n        this.setState({\n            userChoice: event.target.value\n        })\n    }\n\n    nullButton = (event) => {\n        event.preventDefault()\n    }\n\n    render() {\n        return (\n            <nav>\n                <form className=\"formMenu\" action=''>\n                    <select onChange={this.getFormInfo} onClick={this.props.melodyChange ? this.nullButton : (e) => this.props.handleChange(e, this.state.userChoice)} value={this.state.userChoice} name='whichCity' id='whichCity'>\n{/* disabled selected is giving me a warning, but it's achieving what I need. */}\n                        <option value='' disabled selected>Choose A City</option>\n                        <option value='4118' >Toronto</option>\n                        <option value='565346' >Helsinki</option>\n                        <option value='1532755'>Casablanca</option>\n                        <option value='2458833'>New Orleans</option>\n                        <option value='15015372'>Kyoto</option>\n                        <option value='2351310'>Wellington</option>\n                    </select>\n                    {/* <button className=\"btnLaunch btnGlobal\" onClick={this.props.melodyChange ? this.nullButton : (e) => this.props.handleChange(e, this.state.userChoice)} type=\"submit\">Launch</button> */}\n                </form>\n            </nav>\n        )\n    }\n}\n\n\n\nexport default Form;","import React, { Component } from 'react';\n// import './partials/Setup.scss'\n// import './partials/Button.scss';\n// import './partials/LandingPage.scss';\n// import './partials/MediaQuery.scss';\n\n\nclass LandingPage extends Component{\n    constructor(){\n        super();\n        this.state = {\n            description:true\n        }\n    }\n\n    onClickLandingPage = () => {\n        this.setState({\n            description: false\n        })\n    }\n    render(){\n        return(\n            <div>\n                {this.state.description\n                    ?   <div className=\"landingPage\">\n                            <h2>DESCRIPTION</h2>\n                            <p>This app collects real time data from different cities across the world and composes it into a soundscape that signifies the active weather system present in your selected city. Various weather parameters affect the synth by impacting which notes are played and in what scale. Similar to a wind chime, the speed of wind determines the pace of the composition.</p>\n                            <button className=\"btnGlobal btnLandingPage\" onClick={this.onClickLandingPage}>Enter</button>\n                        </div>\n                    :   ''\n                }\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport './App.scss';\nimport axios from 'axios';\nimport * as Tone from \"tone\";\nimport Form from './Form';\nimport LandingPage from './LandingPage';\n\n// C Major\nconst scaleOne = {\n  0: 'C3',\n  1: 'D3',\n  2: 'E3',\n  3: 'F3',\n  4: 'G3',\n  5: 'A3',\n  6: 'B3',\n  7: 'G2',\n  8: 'B2',\n  9: '0'\n}\n\n//C Dorian \nconst scaleTwo = {\n  0: 'C3',\n  1: 'D3',\n  2: 'Eb3',\n  3: 'F3',\n  4: 'G3',\n  5: 'A3',\n  6: 'Bb3',\n  7: 'G2',\n  8: 'Bb2',\n  9: '0'\n}\n\n//Custom\nconst scaleThree = {\n  0: 'F3',\n  1: 'Eb3',\n  2: 'C3',\n  3: 'Gb2',\n  4: 'D3',\n  5: 'A3',\n  6: 'Bb2',\n  7: 'Gb2',\n  8: 'F1',\n  9: '0'\n}\n\n//Lydian\nconst scaleFour = {\n  0: 'C3',\n  1: 'D3',\n  2: 'E3',\n  3: 'F#3',\n  4: 'G3',\n  5: 'A3',\n  6: 'B3',\n  7: 'C2',\n  8: 'F#2',\n  9: '0'\n}\n\n// Hiraj≈çshi\nconst scaleFive = {\n  0: 'C3',\n  1: 'Db3',\n  2: 'F3',\n  3: 'Gb3',\n  4: 'Bb3',\n  5: 'C4',\n  6: 'Bb2',\n  7: 'Gb2',\n  8: 'Db4',\n  9: '0'\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.synth =\n      new Tone.Synth({\n        \"oscillator\": {\n          \"type\": \"triangle\"\n        },\n        \"envelope\": {\n          \"attack\": 0.005,\n          \"decay\": 0.1,\n          \"sustain\": 0.3,\n          \"release\": 0.5\n        }\n      })\n\n    this.state = {\n      citySelect: '',\n      cityName: '',\n      weatherStatis: '',\n      weatherName:'',\n      windSpeed: 0,\n      windDirection: 0,\n      visibility: 0,\n      humidity: 0,\n      loading: false,\n      melody: false,\n      description: true,\n    }\n\n  }\n  componentDidMount() {\n    //call this.getWeather once the component is rendered\n    // this.getWeather()\n  }\n\n  getWeather = () => {\n    this.setState({\n      loading: true\n    }, () => {\n      const url = `https://www.metaweather.com/api/location/${this.state.citySelect}`;\n      console.log(url);\n      axios({\n        method: 'GET',\n        url: 'https://proxy.hackeryou.com',\n        params: {\n          reqUrl: url\n        }\n        \n      }).then((result) => {\n        // get result from Axios call, navigate to the weather for the current day\n        const weatherData = result.data.consolidated_weather[0]\n        Tone.Transport.stop();\n        console.log(weatherData.wind_direction);\n        this.setState({\n          cityName:result.data.title,\n          windSpeed: weatherData.wind_speed,\n          weatherStatis: weatherData.weather_state_abbr,\n          weatherName: weatherData.weather_state_name,\n          windDirection: weatherData.wind_direction,\n          visibility: weatherData.visibility,\n          humidity: weatherData.humidity,\n          loading: false,\n        });\n      })\n    })\n  }\n\n  handleChange = (event, metropolis) => {\n    event.preventDefault();\n    //update the citySelect in state and make new axios call\n    this.setState({\n      citySelect: metropolis\n    }, () => this.getWeather())\n    //If metroplis is '' loading:false? or turn off launch click?\n  }\n\n\n  repeat = (time, index) => {\n    // Notes playing equation\n    // I've taken wind direction and added visibility to diversify the note array, then times it to move the decimal\n    const windD = (this.state.windDirection + this.state.visibility) * 100000000000\n    const newVis = Math.round(windD)\n    const numString = newVis.toString();\n    const numNotes = [...numString]\n    const newArray = numNotes.map((newNumber) => {\n      if (this.state.weatherStatis === 'lc' || this.state.weatherStatis === 'hc' ) {\n        return scaleOne[newNumber]\n      } if (this.state.weatherStatis === 'lr') {\n        return scaleTwo[newNumber]\n      } if (this.state.weatherStatis === 's') {\n        return scaleThree[newNumber]\n      } if (this.state.weatherStatis === 'c') {\n        return scaleFour[newNumber]\n      } if (this.state.weatherStatis === 'hr') {\n        return scaleFive[newNumber]\n      }\n    });\n    // console.log(newArray);\n    let note = newArray[index % newArray.length];\n    this.synth.triggerAttackRelease(note, '8n', time)\n  }\n\n\n  scheduleRepeat = () => {\n    let index = 0;\n    Tone.Transport.scheduleRepeat(time => {\n      this.repeat(time, index);\n      index++;\n    }, '8n');\n  }\n\n\n  startTone = () => {\n    this.setState({\n      melody: true\n    })\n    // Currently all FXs are offline untill next update\n    this.synth.toMaster();\n\n    //wind speed is setting the BPM (* 10 to make sure its not too slow)\n    Tone.Transport.bpm.value = (this.state.windSpeed) * 10\n    Tone.Transport.start();\n    this.synth.triggerAttackRelease();\n    this.scheduleRepeat();\n  }\n\n  stopTone = () => {\n    Tone.Transport.stop();\n    this.setState({\n      melody: false\n    })\n  }\n\n  onClickLandingPage = () => {\n    this.setState({\n      description: false\n      \n    })\n  }\n\n  render() {\n    return (\n      <div className=\"zeus\">\n        <LandingPage />\n        {this.state.weatherStatis === 'hr' || this.state.weatherStatis === 's' || this.state.weatherStatis === 'lr'\n          ? <div className=\"cloudBG\">\n            {/* <img src={require('./assets/rain.png')} alt=\"\"/> */}\n            <div className=\"rain\"></div>\n          </div>\n          : <div className=\"clearBG\"></div>\n        }\n        {this.state.weatherStatis === 'lc' || this.state.weatherStatis === 'hc'\n          ? <div className=\"cloudBG\"></div>\n          : <div className=\"clearBG\"></div>\n        }\n        <header>\n          <div className=\"headerTitle\">\n            <h1>WEATHER SYNTH</h1>\n          </div>\n        </header>\n        <img src={require ('./assets/skyline.png')} alt=\"\"/>\n        <section className=\"controlPanel\">\n        {/* Checking it loading is T/F to display loading on axios call */}\n        {/* I couldn't figure out the logic to make the spinner not appear when the page first loaded. I know I'm getting a 400 error because my axios call doesnt have a proper end point. I tried to make a condistional setState, but I ended up breaking everything. */}\n        {this.state.loading\n          ? <i className=\"fas fa-spinner fa-pulse\"></i>\n          : <div>\n              <div>\n                <Form handleChange={this.handleChange} melodyChange={this.state.melody} />\n                  <div className=\"startStop\">\n                    <button className=\"btnGlobal btnStart\" onClick={this.state.melody ? null : this.startTone} id=\"startSong\">Start</button>\n                    <button className=\"btnGlobal btnStop\" onClick={this.stopTone} id=\"stopSong\">Stop</button>\n                  </div>\n              </div>\n              <div>\n                <p>City : {this.state.cityName}</p>\n                <p>Wind Speed : {Math.round((this.state.windSpeed * 1.60934) * 100) / 100} km/h</p>\n                <p>Weather Condition : {this.state.weatherName}</p>\n              </div>\n          </div>}\n        </section>\n        <footer>\n          <p>Built by Patrick Sherrard</p>\n          <p>Made with Tone.js and MetaWeather</p>\n        </footer>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}